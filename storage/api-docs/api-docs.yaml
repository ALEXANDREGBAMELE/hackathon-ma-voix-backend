openapi: 3.0.0
info:
  title: 'API Documentation'
  description: "Documentation des API de l'application Les Innovateurs. Cette documentation fournit des informations détaillées sur les différentes API disponibles pour gérer les utilisateurs, les élections, les candidats, les activités, les sondages et d'autres fonctionnalités de l'application."
  license:
    name: 'URL Accueil'
    url: 'https://lesinnovateurs.me'
  version: 1.0.0
paths:
  not-defined-yet:
    put:
      tags:
        - 'User Authenticated actions'
      summary: 'Modifier un commentaire'
      operationId: 4659c27c3500950dfec64a6e0529615a
      parameters:
        -
          name: id
          in: path
          description: 'Id du commentaire'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Commentaire'
      responses:
        200:
          description: 'Commentaire modifie avec succes'
        404:
          description: 'Commentaire non trouve'
    post:
      tags:
        - 'Admin Actions'
      summary: 'Add a new admin'
      operationId: 47e8ba5e07df7c220e55ec1dd2614b7d
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Admin'
      responses:
        201:
          description: 'Admin added successfully'
        400:
          description: 'Bad request'
    delete:
      tags:
        - 'User Authenticated actions'
      summary: 'Supprimer un vote'
      operationId: 401492d0ee002b21130078492f0a9435
      parameters:
        -
          name: id_election
          in: path
          description: "Id de l'election"
          required: true
          schema:
            type: integer
            format: int64
        -
          name: id_user
          in: path
          description: "Id de l'utilisateur"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 'Vote supprime avec succes'
        404:
          description: 'Vote non trouve'
  /api/admin/add-election:
    post:
      tags:
        - 'Admin Actions'
      summary: 'Add a new election'
      operationId: ee5dd37447a93279bfae7f2ecd609eb4
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Election'
      responses:
        201:
          description: 'Election added successfully'
        400:
          description: 'Bad request'
      security:
        -
          bearerAuth: []
  '/api/admin/update-election/{id}':
    put:
      tags:
        - 'Admin Actions'
      summary: 'Update an election'
      operationId: 6cf13e51271ec084c318d0854a74131e
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Election'
      responses:
        201:
          description: 'Election updated successfully'
        400:
          description: 'Bad request'
      security:
        -
          bearerAuth: []
  '/api/admin/delete-election/{id}':
    delete:
      tags:
        - 'Admin Actions'
      summary: 'Delete an election'
      operationId: 57f9165cbe5fe596b94a8ab6f9fdb3d4
      responses:
        201:
          description: 'Election deleted successfully'
        400:
          description: 'Bad request'
      security:
        -
          bearerAuth: []
  '/api/admin/election/{id}/update-banner':
    put:
      tags:
        - 'Admin Actions'
      summary: 'Update banner'
      operationId: abe112c081a0ee600585b3e7f5704ae0
      parameters:
        -
          name: id
          in: path
          description: "ID de l'élection"
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                banner:
                  description: " Image Banniere de l'élection"
                  type: string
                  format: binary
              type: object
      responses:
        201:
          description: 'Banner updated successfully'
        400:
          description: 'Bad request'
      security:
        -
          bearerAuth: []
  '/api/admin/election/{id}/update-logo':
    put:
      tags:
        - 'Admin Actions'
      summary: 'Update banner'
      operationId: f69cab1a7f450688be90d79a420007f6
      parameters:
        -
          name: id
          in: path
          description: "ID de l'élection"
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                logo:
                  description: " Image Logo de l'élection"
                  type: string
                  format: binary
              type: object
      responses:
        201:
          description: 'logo updated successfully'
        400:
          description: 'Bad request'
      security:
        -
          bearerAuth: []
  /api/admin/add-sondage:
    post:
      tags:
        - 'Admin Actions'
      summary: 'Add a new sondage'
      operationId: ff582b501bfdb3996d60336cc17126b0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sondage'
      responses:
        201:
          description: 'Sondage added successfully'
        400:
          description: 'Bad request'
      security:
        -
          bearerAuth: []
  '/api/admin/update-sondage/{id}':
    put:
      tags:
        - 'Admin Actions'
      summary: 'update sondage'
      operationId: 67a8a912a57114007f81fc7667e1f46c
      parameters:
        -
          name: id
          in: path
          description: 'ID du sondage'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sondage'
      responses:
        201:
          description: 'Sondage added successfully'
        400:
          description: 'Bad request'
      security:
        -
          bearerAuth: []
  '/api/admin/delete-sondage/{id}':
    delete:
      tags:
        - 'Admin Actions'
      summary: 'Delete sondage'
      operationId: 5d6bbf5e2b1f9ebe3a823346ccf95e4d
      parameters:
        -
          name: id
          in: path
          description: 'ID du sondage'
          required: true
          schema:
            type: integer
      responses:
        201:
          description: 'Sondage deleted successfully'
        400:
          description: 'Bad request'
      security:
        -
          bearerAuth: []
  /api/admin/add-type-sondage:
    put:
      tags:
        - 'Admin Actions'
      summary: 'Update a type sondage'
      operationId: fc669db849b5108f53c624cc2dbd2de0
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TypeSondage'
      responses:
        201:
          description: 'Type sondage updated successfully'
        400:
          description: 'Bad request'
      security:
        -
          bearerAuth: []
  '/api/admin/update-type-sondage/{id}':
    put:
      tags:
        - 'Admin Actions'
      summary: 'Update a type sondage'
      operationId: a724c840b6924732b03bdcc5fcfced0d
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TypeSondage'
      responses:
        201:
          description: 'Type sondage updated successfully'
        400:
          description: 'Bad request'
      security:
        -
          bearerAuth: []
  '/api/admin/delete-type-sondage/{id}':
    delete:
      tags:
        - 'Admin Actions'
      summary: 'Delete a type sondage'
      operationId: bc4467a8e68110fa858e3767c891744f
      responses:
        201:
          description: 'Type sondage deleted successfully'
        400:
          description: 'Bad request'
      security:
        -
          bearerAuth: []
  api/admin/elections/add-participant:
    post:
      tags:
        - 'Admin Actions'
      summary: 'Ajouter un participant à une élection'
      description: 'Ajouter un participant à une élection'
      operationId: 65da1435e3f0ebea30fd582140199b91
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElectionParticipant'
      responses:
        200:
          description: 'Succès - Participant ajouté avec succès'
        401:
          description: "Non autorisé - L'utilisateur n'est pas authentifié"
  /api/admin/elections/delete-participant:
    delete:
      tags:
        - 'Admin Actions'
      summary: 'Supprimer un participant à une élection'
      description: 'Supprimer un participant à une élection'
      operationId: 5250ffa64766ca276d0fe4e0e67ead06
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ElectionParticipant'
      responses:
        200:
          description: 'Succès - Participant supprimé avec succès'
        401:
          description: "Non autorisé - L'utilisateur n'est pas authentifié"
  '/api/admin/elections/{id}/calculate-result':
    get:
      tags:
        - 'Admin Actions'
      summary: "Calculer les résultats d'une élection"
      operationId: c85ed57b40703c9698305c824bb068c9
      parameters:
        -
          name: id
          in: path
          description: "ID de l'élection"
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: 'Succès - Résultats calculés et renvoyés'
        401:
          description: "Non autorisé - L'utilisateur n'est pas authentifié"
  '/api/admin/elections/{id}/get-result':
    get:
      tags:
        - 'Admin Actions'
      summary: "Obtenir les résultats d'une élection"
      operationId: 0d46ecce80feec4f7ec3337220567296
      parameters:
        -
          name: id
          in: path
          description: "ID de l'élection"
          required: true
          schema:
            type: integer
            example: 1
      responses:
        200:
          description: "Succès - Résultats de l'élection renvoyés"
        401:
          description: "Non autorisé - L'utilisateur n'est pas authentifié"
  /not-defined-yet:
    post:
      tags:
        - 'Admin Actions'
      summary: 'Ajouter un candidat'
      operationId: e23b3611a2b9771d3c63e4de23ed5472
      parameters:
        -
          name: id_user
          in: path
          description: "ID de l'utilisateur à enregistrer comme candidat"
          required: true
          schema:
            type: integer
        -
          name: id_parti_politique
          in: path
          description: 'ID du parti politique auquel le candidat appartient'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Candidat ajouté avec succès'
        404:
          description: 'Utilisateur non trouvé'
  /api/admin/add-candidat:
    post:
      tags:
        - 'Admin Actions'
      summary: 'Ajouter un candidat'
      operationId: 5c25a263b55ba5a967986aec1a3de46f
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CandidatRequest'
      responses:
        201:
          description: 'Candidat ajouté avec succès'
        400:
          description: 'Bad request'
      security:
        -
          bearerAuth: []
  '/api/admin/update-candidat/{id_user}/{id_parti_politique}':
    put:
      tags:
        - 'Admin Actions'
      summary: 'Mettre à jour un candidat'
      operationId: 3fd71cdc174fbe3ad2904f4860b18ec3
      parameters:
        -
          name: id_user
          in: path
          description: "ID de l'utilisateur à mettre à jour comme candidat"
          required: true
          schema:
            type: integer
        -
          name: id_parti_politique
          in: path
          description: 'ID du nouveau parti politique auquel le candidat appartient'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Candidat modifié avec succès'
        404:
          description: 'Utilisateur non trouvé'
  '/api/admin/delete-candidat/{id_user}':
    delete:
      tags:
        - 'Admin Actions'
      summary: 'Supprimer un candidat'
      operationId: 7783b9d5e5b057b43a0f99b50b60b196
      parameters:
        -
          name: id_user
          in: path
          description: "ID de l'utilisateur à supprimer comme candidat"
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Candidat supprimé avec succès'
        404:
          description: 'Utilisateur non trouvé'
  /api/admin/add-parti-politique:
    post:
      tags:
        - 'Admin Actions'
      summary: 'Ajouter un nouveau parti politique'
      operationId: ab659e37b43cdc4966fc550c020e2af7
      requestBody:
        required: true
        content:
          application/json:
            schema: []
      responses:
        201:
          description: 'Parti politique ajouté avec succès'
        422:
          description: 'Validation error'
      security:
        -
          bearerAuth: []
  '/api/admin/parti-politique/{id}':
    put:
      tags:
        - 'Admin Actions'
      summary: 'Mettre à jour un parti politique'
      operationId: 95aa689ab3dbe85f66a32b23f296f9d2
      parameters:
        -
          name: id
          in: path
          description: 'ID du parti politique'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema: []
      responses:
        200:
          description: 'Parti politique mis à jour avec succès'
        404:
          description: 'Parti politique non trouvé'
      security:
        -
          bearerAuth: []
    delete:
      tags:
        - 'Admin Actions'
      summary: 'Supprimer un parti politique'
      operationId: 70b6d2333c74c31c61527fd292715b4d
      parameters:
        -
          name: id
          in: path
          description: 'ID du parti politique'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 'Parti politique supprimé avec succès'
        404:
          description: 'Parti politique non trouvé'
      security:
        -
          bearerAuth: []
  /api/private/user/get-commune-posts:
    get:
      tags:
        - 'User Authenticated actions'
      summary: "Récupérer tous les posts des d'une commune"
      operationId: 157c7faafd18edf16516e4786637ac34
      parameters:
        -
          name: id
          in: path
          description: 'Id du candidat'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 'Liste des posts récupérée avec succès'
        401:
          description: 'Non autorisé'
  /api/private/candidat/add-post:
    post:
      tags:
        - 'Candidat Authenticated actions'
      summary: 'Ajouter un post'
      operationId: 81e8f10b3eea41b21243636ccc3d7a96
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        200:
          description: 'Post ajouté avec succès'
        401:
          description: 'Non autorisé'
  '/api/private/candidat/{id}/get-posts':
    get:
      tags:
        - 'Candidat Authenticated actions'
      summary: "Récupérer tous les posts d'un candidat"
      operationId: 773309a3666dae22a3cd852a0e358c91
      parameters:
        -
          name: id
          in: path
          description: 'Id du candidat'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 'Liste des posts récupérée avec succès'
        401:
          description: 'Non autorisé'
  '/api/private/candidat/{id}/delete-post':
    delete:
      tags:
        - 'Candidat Authenticated actions'
      summary: 'Supprimer un post'
      operationId: bc4b504ecbb5d11b2d14b6940003775b
      parameters:
        -
          name: id
          in: path
          description: 'Id du post à supprimer'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 'Post supprimé avec succès'
        401:
          description: 'Non autorisé'
  /api/private/candidat/add-meet:
    post:
      tags:
        - 'Candidat Authenticated actions'
      summary: 'Ajouter une rencontre'
      operationId: dd0d1e9620fce930eeb8d44bdae0ba7a
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Meet'
      responses:
        200:
          description: 'Rencontre ajoutée avec succès'
        401:
          description: 'Non autorisé'
  '/api/private/candidat/{id}/get-meets':
    get:
      tags:
        - 'Candidat Authenticated actions'
      summary: "Récupérer toutes les rencontres d'un candidat"
      operationId: 0c2b0bfea2090815ff7d34b17b3e9645
      parameters:
        -
          name: id
          in: path
          description: 'Id du candidat'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 'Liste des rencontres récupérée avec succès'
        401:
          description: 'Non autorisé'
  '/api/private/candidat/search-meets/{val}':
    get:
      tags:
        - 'Candidat Authenticated actions'
      summary: 'Rechercher des rencontres par valeur'
      operationId: 51f1e5075c7094b9440f3cea8459f126
      parameters:
        -
          name: val
          in: path
          description: 'Valeur de recherche'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Liste des rencontres trouvées récupérée avec succès'
        401:
          description: 'Non autorisé'
  '/api/private/candidat/{id}/delete-meet':
    delete:
      tags:
        - 'Candidat Authenticated actions'
      summary: 'Supprimer une rencontre'
      operationId: 730b7b465314b46fb982d6062a17eda7
      parameters:
        -
          name: id
          in: path
          description: 'Id de la rencontre à supprimer'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 'Rencontre supprimée avec succès'
        401:
          description: 'Non autorisé'
  '/api/private/candidat/{id}/get-activities':
    get:
      tags:
        - 'Candidat Authenticated actions'
      summary: "Récupérer toutes les activités d'un candidat"
      operationId: 7f19cba271b959dd3c32d864916fe70f
      parameters:
        -
          name: id
          in: path
          description: 'Id du candidat'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 'Liste des activités récupérée avec succès'
        401:
          description: 'Non autorisé'
  /api/private/candidat/add-activity:
    post:
      tags:
        - 'Candidat Authenticated actions'
      summary: 'Ajouter une activité'
      operationId: 49f5f3aac2eb1eaa2cfcefee724e8e59
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activity'
      responses:
        200:
          description: 'Activité ajoutée avec succès'
        401:
          description: 'Non autorisé'
  '/api/private/candidat/update-activity/{id}':
    put:
      tags:
        - 'Candidat Authenticated actions'
      summary: 'Mettre à jour une activité'
      operationId: 2825780f9a375686c52e9b581ebfd6d1
      parameters:
        -
          name: id
          in: path
          description: "Id de l'activité à mettre à jour"
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Activity'
      responses:
        200:
          description: 'Activité mise à jour avec succès'
        401:
          description: 'Non autorisé'
  '/api/private/candidat/{id}/delete-activity':
    delete:
      tags:
        - 'Candidat Authenticated actions'
      summary: 'Supprimer une activité'
      operationId: f7ae672b9c5cd91c06ad4e973dcc0ddf
      parameters:
        -
          name: id
          in: path
          description: "Id de l'activité à supprimer"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 'Activité supprimée avec succès'
        401:
          description: 'Non autorisé'
  /api/private/candidat/get-my-followers:
    get:
      tags:
        - 'Candidat Authenticated actions'
      summary: 'Récupérer mes followers'
      operationId: 0bf4c381d55d87141808a9dd1782777e
      responses:
        200:
          description: 'Liste des followers récupérée avec succès'
        401:
          description: 'Non autorisé'
  /api/private/candidat/count-my-followers:
    get:
      tags:
        - 'Candidat Authenticated actions'
      summary: 'Récupérer le nombre de mes followers'
      operationId: 80d1cc5cd23d2cbbade79ccfc8f11b1a
      responses:
        200:
          description: 'Nombre de followers récupéré avec succès'
        401:
          description: 'Non autorisé'
  /api/private/user/add-photo:
    post:
      tags:
        - 'User Authenticated actions'
      summary: 'Ajouter une photo de profil'
      operationId: 8fe56ec8909add27fd187e116d41daf3
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                photo:
                  type: string
                  format: binary
              type: object
      responses:
        200:
          description: 'Photo ajoutee avec succes'
        404:
          description: 'Utilisateur non trouve'
  /api/private/user/update-datas:
    put:
      tags:
        - 'User Authenticated actions'
      summary: "Modifier les donnees d'un utilisateur"
      operationId: cf431de0bd090008f6c0b307e3d64ee2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: 'Donnees modifiees avec succes'
        404:
          description: 'Utilisateur non trouve'
  /api/private/user/update-password:
    put:
      tags:
        - 'User Authenticated actions'
      summary: "Modifier le mot de passe d'un utilisateur"
      operationId: 3d97441b5c5407b10f47d95f85e26f3d
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                password:
                  type: string
              type: object
      responses:
        200:
          description: 'Mot de passe modifié avec succès'
        404:
          description: 'Utilisateur non trouvé'
  /api/public/user/reset-password:
    post:
      tags:
        - 'Public API'
      summary: "Reinitialiser le mot de passe d'un utilisateur"
      operationId: 8e8cfb5356c5764423ed4c21a1aeeb0d
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                phone:
                  type: string
                nom:
                  type: string
                email:
                  type: string
                password:
                  type: string
              type: object
      responses:
        200:
          description: 'Mot de passe reinitialise avec succes'
        404:
          description: 'Utilisateur non trouve'
  /api/private/user/add-comment:
    post:
      tags:
        - 'User Authenticated actions'
      summary: 'Add a new comment'
      operationId: 1949cdd8e85b8e452873440095f13604
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Commentaire'
      responses:
        201:
          description: 'Comment added successfully'
        400:
          description: 'Bad request'
  '/api/private/user/{id}/delete-comment':
    delete:
      tags:
        - 'User Authenticated actions'
      summary: 'Supprimer un commentaire'
      operationId: 27697c7251d71535a050047f59ecb10b
      parameters:
        -
          name: id
          in: path
          description: 'Id du commentaire'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 'Commentaire supprime avec succes'
        404:
          description: 'Commentaire non trouve'
  /api/private/user/my-comments:
    get:
      tags:
        - 'User Authenticated actions'
      summary: "Recuperer les commentaires d'un utilisateur"
      operationId: 2b51d86edd9aa56cd93f36addee3b07a
      responses:
        200:
          description: 'Commentaires recuperes avec succes'
        404:
          description: 'Commentaires non trouves'
  '/api/private/user/{id}/{id_user}/delete-comment':
    delete:
      tags:
        - 'User Authenticated actions'
      summary: 'Supprimer un commentaire'
      operationId: 0e2c90db40451fd18d85e851456b0d65
      parameters:
        -
          name: id
          in: path
          description: 'Id du commentaire'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: id_user
          in: path
          description: "Id de l'utilisateur"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 'Commentaire supprime avec succes'
        404:
          description: 'Commentaire non trouve'
  /api/private/user/add-comment-response:
    post:
      tags:
        - 'User Authenticated actions'
      summary: 'Add a new comment response'
      operationId: 9926cfbe9e46aceb6ab6698a732424c9
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentaireReplique'
      responses:
        201:
          description: 'Comment response added successfully'
        400:
          description: 'Bad request'
  '/api/private/user/{id}/delete-comment-response':
    delete:
      tags:
        - 'User Authenticated actions'
      summary: 'Supprimer un commentaire'
      operationId: 4b728e19c6687904d2e5f430b3530e5e
      parameters:
        -
          name: id
          in: path
          description: 'Id du commentaire response'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 'Commentaire supprime avec succes'
        404:
          description: 'Commentaire non trouve'
  /api/private/user/my-comment-responses:
    get:
      tags:
        - 'User Authenticated actions'
      summary: "Recuperer les commentaires d'un utilisateur"
      operationId: 8f0e77052dbfe3d6efbd8e36a53e1318
      responses:
        200:
          description: 'Commentaires recuperes avec succes'
        404:
          description: 'Commentaires non trouves'
  /api/private/user/add-like:
    post:
      tags:
        - 'User Authenticated actions'
      summary: 'Add a new like'
      operationId: 8fea0b01676a452d2f2d901b0f406efc
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Like'
      responses:
        201:
          description: 'Like added successfully'
        400:
          description: 'Bad request'
  '/api/private/user/{id}/delete-like':
    delete:
      tags:
        - 'User Authenticated actions'
      summary: 'Supprimer un like'
      operationId: c6d53612a53fd4be353464309b060dcb
      parameters:
        -
          name: id
          in: path
          description: 'Id du like'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 'Like supprime avec succes'
        404:
          description: 'Like non trouve'
  /api/private/user/my-likes:
    get:
      tags:
        - 'User Authenticated actions'
      summary: "Recuperer les likes d'un utilisateur"
      operationId: f040d6ac000c0740c3d6e3b708418839
      responses:
        200:
          description: 'Likes recuperes avec succes'
        404:
          description: 'Likes non trouves'
  '/api/private/user/{id}/{id_user}/delete-like':
    delete:
      tags:
        - 'User Authenticated actions'
      summary: 'Supprimer un like'
      operationId: 717e326f1997376ca4208740a597d666
      parameters:
        -
          name: id
          in: path
          description: 'Id du post'
          required: true
          schema:
            type: integer
            format: int64
        -
          name: id_user
          in: path
          description: "Id de l'utilisateur"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 'Like supprime avec succes'
        404:
          description: 'Like non trouve'
  /api/private/user/join-meet:
    post:
      tags:
        - 'User Authenticated actions'
      summary: 'Rejoindre une reunion'
      operationId: dbc2ffcd90cc01c9832227ca2ffe182e
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeetParticipant'
      responses:
        201:
          description: 'Reunion rejointe avec succes'
        400:
          description: 'Bad request'
  /api/private/user/quit-meet:
    post:
      tags:
        - 'User Authenticated actions'
      summary: 'Quitter une reunion'
      operationId: 2da795f27c18b38bb5a779293d506023
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeetParticipant'
      responses:
        201:
          description: 'Reunion quittee avec succes'
        400:
          description: 'Bad request'
  /api/private/user/add-vote:
    post:
      tags:
        - 'User Authenticated actions'
      summary: 'Ajouter un vote'
      operationId: cf7673647996aa7a7588717d7a38061e
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResultatSondage'
      responses:
        201:
          description: 'Vote ajoute avec succes'
        400:
          description: 'Bad request'
  '/api/private/user/{id_sondage}/get-my-vote':
    get:
      tags:
        - 'User Authenticated actions'
      summary: 'Recuperer mon vote'
      operationId: cce735ff5e52971805985efbe5d93a33
      parameters:
        -
          name: id_sondage
          in: path
          description: 'Id du sondage'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 'Vote recupere avec succes'
        404:
          description: 'Vote non trouve'
  /api/private/user/get-sondages:
    get:
      tags:
        - 'User Authenticated actions'
      summary: "Recuperer les sondages auxquels l'utilisateur n'a pas encore vote"
      operationId: 983068522e170913f7989aaf714b27a1
      responses:
        200:
          description: 'Sondages recuperes avec succes'
        404:
          description: 'Sondages non trouves'
  '/api/private/user/{id_sondage}/update-my-vote':
    put:
      tags:
        - 'User Authenticated actions'
      summary: 'Modifier mon vote'
      operationId: 3c2f36f2e5f3d9bafe64af4e6a62834b
      parameters:
        -
          name: id_sondage
          in: path
          description: 'Id du sondage'
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResultatSondage'
      responses:
        200:
          description: 'Vote modifie avec succes'
        404:
          description: 'Vote non trouve'
  '/api/private/user/{id_sondage}/delete-my-vote':
    delete:
      tags:
        - 'User Authenticated actions'
      summary: 'Supprimer mon vote'
      operationId: eef54926d04b32c1503897564de84af0
      parameters:
        -
          name: id_sondage
          in: path
          description: 'Id du sondage'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 'Vote supprime avec succes'
        404:
          description: 'Vote non trouve'
  /api/private/vote/add-election-vote:
    post:
      tags:
        - 'User Authenticated actions'
      summary: 'Ajouter un vote'
      operationId: 97b11ecfe272189ccc11c7d33daf8253
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vote'
      responses:
        201:
          description: 'Vote ajoute avec succes'
        400:
          description: 'Bad request'
  '/api/private/user/{id_election}/{id_user}/get-my-vote':
    get:
      tags:
        - 'User Authenticated actions'
      summary: 'Recuperer un vote'
      operationId: 12d2e0db63fb9b65b76743a790989fe2
      parameters:
        -
          name: id_election
          in: path
          description: "Id de l'election"
          required: true
          schema:
            type: integer
            format: int64
        -
          name: id_user
          in: path
          description: "Id de l'utilisateur"
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 'Vote recupere avec succes'
        404:
          description: 'Vote non trouve'
  /api/private/user/follow-candidat:
    post:
      tags:
        - 'User Authenticated actions'
      summary: 'Ajouter un follower'
      operationId: fe283a99b54c9382f5c6edca49094cee
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Follower'
      responses:
        201:
          description: 'Follower ajoute avec succes'
        400:
          description: 'Bad request'
  /api/private/user/get-following:
    get:
      tags:
        - 'User Authenticated actions'
      summary: 'Recuperer les candidats suivis par un utilisateur'
      operationId: 8418f8ef521550fb896e440360398273
      responses:
        200:
          description: 'Followers recuperes avec succes'
        404:
          description: 'Followers non trouves'
  '/api/private/user/{id}/is-following':
    get:
      tags:
        - 'User Authenticated actions'
      summary: 'Voir si un utilisateur suit un candidat précis'
      operationId: abb95851586703885835b0530b79feb5
      parameters:
        -
          name: id
          in: path
          description: 'Id du candidat'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 'Followers recuperes avec succes'
        404:
          description: 'Followers non trouves'
  /api/private/user/unfollow:
    delete:
      tags:
        - 'User Authenticated actions'
      summary: 'Supprimer un follower'
      operationId: ffcd649698213a6ccc43697f19ae5410
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Follower'
      responses:
        200:
          description: 'Follower supprime avec succes'
        404:
          description: 'Follower non trouve'
  '/api/private/user/{id}/get-followers':
    get:
      tags:
        - 'User Authenticated actions'
      summary: "Recuperer les followers d'un candidat"
      operationId: 8e15a3ec6d031d5c673981c229adb4ae
      parameters:
        -
          name: id
          in: path
          description: 'Id du candidat'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 'Followers recuperes avec succes'
        404:
          description: 'Followers non trouves'
  /api/public/activities:
    get:
      tags:
        - 'Public API'
      summary: 'Get all activities'
      operationId: 66a6c146603a527eaa733bbfb934ab97
      responses:
        200:
          description: 'Activities retrieved successfully'
        404:
          description: 'Activities not found'
  '/api/public/activity/{id}':
    get:
      tags:
        - 'Public API'
      summary: 'Get activity by id'
      operationId: 3a309b741228038e18561263f88614b0
      parameters:
        -
          name: id
          in: path
          description: 'Activity id'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Activity retrieved successfully'
        404:
          description: 'Activity not found'
  /api/public/candidats:
    get:
      tags:
        - 'Public API'
      summary: 'Get all candidats'
      operationId: 4afc8d442e7d6b062112f38a7306dea0
      responses:
        200:
          description: 'Candidats retrieved successfully'
        404:
          description: 'Candidats not found'
  '/api/public/candidat/{id}':
    get:
      tags:
        - 'Public API'
      summary: 'Get  candidat datas'
      operationId: 6842914ab09fdfbf3dff33c989518811
      parameters:
        -
          name: id
          in: path
          description: 'Id candidat'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Candidats retrieved successfully'
        404:
          description: 'Candidats not found'
  '/api/public/candidats/search/{val}':
    get:
      tags:
        - 'Public API'
      summary: 'Get all candidats by value'
      operationId: 179e8029e968b48bf3f035ab0e7c374e
      parameters:
        -
          name: search
          in: path
          description: 'valeur de recherche de  candidat'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Candidats retrieved successfully'
        404:
          description: 'Candidats not found'
  '/api/public/candidat/{id}/get-activities':
    get:
      tags:
        - 'Public API'
      summary: "Avoir les activités d'un candidat"
      operationId: a47eee700874d2002c20ab55d74efd75
      parameters:
        -
          name: id
          in: path
          description: 'Candidat id'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Activities retrieved successfully'
        404:
          description: 'Candidat not found'
  '/api/public/post/{id}/comments':
    get:
      tags:
        - 'Public API'
      summary: 'Get all comments of a post'
      operationId: 3a4ce51d45355af69347d75997bbfd22
      parameters:
        -
          name: id
          in: path
          description: 'Post id'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Comments retrieved successfully'
        404:
          description: 'Post not found'
  '/api/public/comment/{id}/replies':
    get:
      tags:
        - 'Public API'
      summary: 'Get all comments of a post'
      operationId: 33225a782ecd70d236c9961d37eb7922
      parameters:
        -
          name: id
          in: path
          description: 'Post id'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Comments retrieved successfully'
        404:
          description: 'Post not found'
  '/api/public/comment/{id}/all-replies':
    get:
      tags:
        - 'Public API'
      summary: 'Get all comments of a post'
      operationId: 2d33bad589ed0d222c0e0a291e17b518
      parameters:
        -
          name: id
          in: path
          description: 'Post id'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Comments retrieved successfully'
        404:
          description: 'Post not found'
  /api/public/elections:
    get:
      tags:
        - 'Public API'
      summary: 'Get all elections'
      operationId: a65ad57d7b059d2a71da8d1b36b4e5fa
      responses:
        200:
          description: 'Elections retrieved successfully'
        404:
          description: 'Elections not found'
  '/api/public/election/{id}':
    get:
      tags:
        - 'Public API'
      summary: 'Get election by id'
      operationId: ef5fb07cc661e6e3198718d7e2bcf090
      parameters:
        -
          name: id
          in: path
          description: 'Election id'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Election retrieved successfully'
        404:
          description: 'Election not found'
  '/api/public/election/{id}/participants':
    get:
      tags:
        - 'Public API'
      summary: 'Get all participants of an election'
      operationId: 284778748b802a2e6c319f772bcc3a48
      parameters:
        -
          name: id
          in: path
          description: 'Election id'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Participants retrieved successfully'
        404:
          description: 'Election not found'
  /api/public/posts:
    get:
      tags:
        - 'Public API'
      summary: 'Get all posts'
      operationId: f4f217b2fa455d892d9e0c970ae4fe38
      responses:
        200:
          description: 'Posts retrieved successfully'
        404:
          description: 'Posts not found'
  '/api/public/candidat/{id}/posts':
    get:
      tags:
        - 'Public API'
      summary: 'Get all posts of a candidat'
      operationId: 1339c61bcf6b570fcbe0a2c90421fa57
      parameters:
        -
          name: id
          in: path
          description: 'Candidat id'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Posts retrieved successfully'
        404:
          description: 'Candidat not found'
  '/api/public/posts/{id}':
    get:
      tags:
        - 'Public API'
      summary: 'Get post by id'
      operationId: 1123df340f779c9d5678bd5f20955503
      parameters:
        -
          name: id
          in: path
          description: 'Post id'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Post retrieved successfully'
        404:
          description: 'Post not found'
  '/api/public/posts/search/{val}':
    get:
      tags:
        - 'Public API'
      summary: 'Get all posts by value'
      operationId: e7f6ece32a7f6500ab0d0a0b0784e0bf
      parameters:
        -
          name: search
          in: path
          description: 'valeur de recherche de  post'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Posts retrieved successfully'
        404:
          description: 'Posts not found'
  '/api/public/post/{id}/likes':
    get:
      tags:
        - 'Public API'
      summary: 'Get all likes of a post'
      operationId: 2997f80300d1af7d0a2d8395dfc9c202
      parameters:
        -
          name: id
          in: path
          description: 'Post id'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Likes retrieved successfully'
        404:
          description: 'Post not found'
  '/api/public/meets/{id_user}':
    get:
      tags:
        - 'Public API'
      summary: 'Get meets'
      description: 'Get a list of meets.'
      operationId: getMeets
      parameters:
        -
          name: id_user
          in: path
          description: 'User id'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Successful response'
        401:
          description: Unauthorized
  /api/public/sondages:
    get:
      tags:
        - 'Public API'
      summary: 'Avoir tous les sondages'
      operationId: 496d34e7018d9a675ebea81d6fe530ff
      responses:
        200:
          description: 'Sondages retrieved successfully'
        404:
          description: 'Sondages not found'
  '/api/public/sondages/{commune}':
    get:
      tags:
        - 'Public API'
      summary: "Avoir les sondages d'une commune"
      operationId: 2bb2ca0dccb40e006473c1d98d0721af
      parameters:
        -
          name: commune
          in: path
          description: 'Commune name'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Sondages retrieved successfully'
        404:
          description: 'Commune not found'
  /api/public/parti-politiques:
    get:
      tags:
        - 'Public API'
      summary: 'Récupérer la liste de tous les partis politiques'
      operationId: 411358d97b7766b617d77ec49ecf9d76
      responses:
        200:
          description: 'Liste des partis politiques récupérée avec succès'
  '/api/public/parti-politique/{id}':
    get:
      tags:
        - 'Public API'
      summary: "Récupérer les détails d'un parti politique"
      operationId: 0c86421e9e9109d1017d3d50b29721e8
      parameters:
        -
          name: id
          in: path
          description: 'ID du parti politique'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 'Détails du parti politique récupérés avec succès'
        404:
          description: 'Parti politique non trouvé'
  /api/public/types-sondages:
    get:
      tags:
        - 'Public API'
      summary: 'Récupérer la liste de tous les types de sondages'
      operationId: 45f17c2c1a70d7ff098bd7aa6042ea17
      responses:
        200:
          description: 'Liste des types de sondages récupérée avec succès'
  '/api/public/type-sondage/{id}':
    get:
      tags:
        - 'Public API'
      summary: "Récupérer les détails d'un type de sondage"
      operationId: 3140983476e07a390113a0c3170ec9d0
      parameters:
        -
          name: id
          in: path
          description: 'ID du type de sondage'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 'Détails du type de sondage récupérés avec succès'
        404:
          description: 'Type de sondage non trouvé'
  '/api/public/sondage/{id}':
    get:
      tags:
        - 'Public API'
      summary: "Récupérer les détails d'un sondage"
      operationId: 597edd54926a48e5b269de7838f4dd85
      parameters:
        -
          name: id
          in: path
          description: 'ID du sondage'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: 'Détails du sondage récupérés avec succès'
        404:
          description: 'Sondage non trouvé'
  /api/public/newsletter:
    post:
      tags:
        - 'Public API'
      summary: "S'inscrire à la newsletter"
      operationId: 27ff836f57dee3f4f0713c835a83ac25
      requestBody:
        description: 'Données à envoyer'
        required: true
        content:
          application/json:
            schema:
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: example@gmail.com
              type: object
      responses:
        200:
          description: 'Inscription à la newsletter effectuée avec succès'
        400:
          description: 'Email invalide'
    delete:
      tags:
        - 'Public API'
      summary: 'Se désinscrire de la newsletter'
      operationId: 8782693054732e056ae0f2d0032e15f0
      requestBody:
        description: 'Données à envoyer'
        required: true
        content:
          application/json:
            schema:
              required:
                - email
              properties:
                email:
                  type: string
                  format: email
                  example: example@example.com
              type: object
      responses:
        200:
          description: 'Désinscription de la newsletter effectuée avec succès'
        400:
          description: 'Email invalide'
  '/api/public/sondages/type/{id}':
    get:
      tags:
        - 'Public API'
      summary: "Récupérer les sondages d'un type de sondage"
      operationId: 31e17076b489da95b8ce7b715b07a2e5
      parameters:
        -
          name: id
          in: path
          description: 'ID du type de sondage'
          required: true
          schema:
            type: integer
      responses:
        200:
          description: 'Sondages récupérés avec succès'
        404:
          description: 'Type de sondage non trouvé'
  '/api/public/sondages/type/nom/{nom}':
    get:
      tags:
        - 'Public API'
      summary: "Récupérer les sondages d'un type de sondage"
      operationId: e4075a8321dfc934a0964c41e0576989
      parameters:
        -
          name: nom
          in: path
          description: 'Nom du type de sondage'
          required: true
          schema:
            type: string
      responses:
        200:
          description: 'Sondages récupérés avec succès'
        404:
          description: 'Type de sondage non trouvé'
  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: 'User login'
      operationId: 535ffeda4b78916efd658b2844ea897a
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  example: password123
              type: object
      responses:
        200:
          description: 'Successful login, returns user and token'
        401:
          description: Unauthorized
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: 'User registration'
      operationId: da8643013c2941f5ed7f8a9c9b4a7f7a
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: 'Successful registration'
        400:
          description: 'Bad request'
  /api/auth/logout:
    post:
      tags:
        - Authentication
      summary: 'User logout'
      operationId: 46f8a14c8083abb69eed72768aa08629
      responses:
        200:
          description: 'Successfully logged out'
        401:
          description: Unauthorized
      security:
        -
          bearerAuth: []
  /api/auth/refresh:
    post:
      tags:
        - Authentication
      summary: 'Refresh authentication token'
      operationId: f3538b6e9c46bcf601a9d194288b03d4
      responses:
        200:
          description: 'Token refreshed'
        401:
          description: Unauthorized
components:
  schemas:
    CandidatRequest:
      title: Candidat-Add-Request
      description: 'Model for a Candidat'
      properties:
        pt_id:
          type: integer
        nom:
          type: string
        prenom:
          type: string
        bio:
          type: string
        photo_url:
          type: string
        commune:
          type: string
        phone:
          type: string
        email:
          type: string
      type: object
    Activity:
      title: "Activité d'un candidat"
      description: 'Model for a Activity'
      properties:
        id_candidat:
          type: integer
        description:
          type: string
        nom:
          type: string
        date_debut:
          type: string
          format: date
        date_fin:
          type: string
          format: date
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      type: object
    Admin:
      title: Admin
      description: 'Admin model'
      properties:
        id_user:
          description: 'User ID associated with the admin'
          type: integer
        created_at:
          description: 'Admin creation date and time'
          type: string
          format: date-time
          readOnly: 'true'
        updated_at:
          description: 'Admin last update date and time'
          type: string
          format: date-time
          readOnly: 'true'
      type: object
    Candidat:
      title: Candidat
      description: 'Model for a Candidat'
      properties:
        user_id:
          type: integer
        pt_id:
          type: integer
        bio:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
      type: object
    Commentaire:
      title: Commentaire
      description: 'Commentaire model'
      properties:
        id_user:
          description: 'User ID associated with the comment'
          type: integer
        id_post:
          description: 'ID of the post associated with the comment'
          type: integer
        commentaire:
          description: 'Content of the comment'
          type: string
        created_at:
          description: 'Comment creation date and time'
          type: string
          format: date-time
          readOnly: 'true'
        updated_at:
          description: 'Comment last update date and time'
          type: string
          format: date-time
          readOnly: 'true'
      type: object
    CommentaireReplique:
      title: CommentaireReplique
      description: 'CommentaireReplique model'
      properties:
        id_commentaire:
          description: 'ID of the original comment'
          type: integer
        id_user:
          description: 'User ID associated with the reply'
          type: integer
        reponse:
          description: 'Content of the reply'
          type: string
        created_at:
          description: 'Reply creation date and time'
          type: string
          format: date-time
          readOnly: 'true'
        updated_at:
          description: 'Reply last update date and time'
          type: string
          format: date-time
          readOnly: 'true'
      type: object
    ElectionParticipant:
      title: "Participant d'Élection"
      description: 'Modèle de participant à une élection'
      properties:
        id_election:
          description: "ID de l'élection"
          type: integer
        id_candidat:
          description: 'ID du candidat participant'
          type: integer
        created_at:
          description: 'Date et heure de création'
          type: string
          format: date-time
          readOnly: 'true'
          nullable: true
        updated_at:
          description: 'Date et heure de mise à jour'
          type: string
          format: date-time
          readOnly: 'true'
          nullable: true
      type: object
    Election:
      title: Élection
      description: "Modèle d'élection"
      properties:
        description:
          description: "Description de l'élection"
          type: string
        nom:
          description: "Nom de l'élection"
          type: string
        duration:
          description: "Durée de l'élection en jours"
          type: string
        image_url:
          description: "URL de l'image de l'élection"
          type: string
        banner_url:
          description: "URL de la bannière de l'élection"
          type: string
        date_debut:
          description: "Date de début de l'élection"
          type: string
          format: date
        date_fin:
          description: "Date de fin de l'élection"
          type: string
          format: date
        type:
          description: "Type de l'élection"
          type: string
        created_at:
          description: 'Date et heure de création'
          type: string
          format: date-time
          readOnly: 'true'
          nullable: true
        updated_at:
          description: 'Date et heure de mise à jour'
          type: string
          format: date-time
          readOnly: 'true'
          nullable: true
      type: object
    Follower:
      title: Follower
      description: 'Model pour un follower'
      properties:
        id:
          description: 'Follower ID'
          type: integer
          format: int64
        id_candidat:
          description: 'Candidat ID'
          type: integer
          format: int64
        id_user:
          description: 'User ID'
          type: integer
          format: int64
        created_at:
          description: 'Creation date'
          type: string
          format: date-time
        updated_at:
          description: 'Last update date'
          type: string
          format: date-time
      type: object
    Like:
      title: 'Like des posts'
      description: 'Modèle de like'
      properties:
        id_user:
          description: "ID de l'utilisateur"
          type: integer
        id_post:
          description: 'ID du post liké'
          type: integer
        created_at:
          description: 'Date et heure de création'
          type: string
          format: date-time
          readOnly: 'true'
          nullable: true
        updated_at:
          description: 'Date et heure de mise à jour'
          type: string
          format: date-time
          readOnly: 'true'
          nullable: true
      type: object
    Meet:
      title: Meet
      description: 'Modèle de réunion'
      properties:
        id_candidat:
          description: 'ID du candidat'
          type: integer
        titre:
          description: 'Titre de la réunion'
          type: string
        description:
          description: 'Description de la réunion'
          type: string
        url_media:
          description: 'URL du média associé à la réunion'
          type: string
        created_at:
          description: 'Date et heure de création'
          type: string
          format: date-time
          readOnly: 'true'
          nullable: true
        updated_at:
          description: 'Date et heure de mise à jour'
          type: string
          format: date-time
          readOnly: 'true'
          nullable: true
      type: object
    MeetParticipant:
      title: MeetParticipant
      description: 'Modèle de participant à une réunion'
      properties:
        id_user:
          description: "ID de l'utilisateur"
          type: integer
        id_meet:
          description: 'ID de la réunion'
          type: integer
        created_at:
          description: 'Date et heure de création'
          type: string
          format: date-time
          readOnly: 'true'
          nullable: true
        updated_at:
          description: 'Date et heure de mise à jour'
          type: string
          format: date-time
          readOnly: 'true'
          nullable: true
      type: object
    Newsletter:
      title: Newsletter
      description: 'Model for representing a newsletter.'
      properties:
        id:
          description: 'Newsletter ID'
          type: integer
          format: int64
        email:
          description: 'Email of the newsletter'
          type: string
        is_active:
          description: 'Status of the newsletter'
          type: boolean
        created_at:
          description: 'Creation date'
          type: string
          format: date-time
        updated_at:
          description: 'Last update date'
          type: string
          format: date-time
      type: object
    Politique:
      title: Politique
      properties:
        nom:
          description: 'nom du parti politique'
          type: string
          example: RHDP
        logo:
          description: 'logo du parti politique'
          type: string
          example: logo.png
        description:
          description: 'description du parti politique'
          type: string
          example: 'description du parti politique'
      type: object
    Post:
      title: Post
      description: 'Modèle de publication (post)'
      properties:
        id_candidat:
          description: 'ID du candidat lié au post'
          type: integer
        titre:
          description: 'Titre de la publication'
          type: string
        description:
          description: 'Description de la publication'
          type: string
        url_media:
          description: 'URL du média associé à la publication'
          type: string
        created_at:
          description: 'Date et heure de création'
          type: string
          format: date-time
          readOnly: 'true'
          nullable: true
        updated_at:
          description: 'Date et heure de mise à jour'
          type: string
          format: date-time
          readOnly: 'true'
          nullable: true
      type: object
    ResultatSondage:
      title: ResultatSondage
      description: 'Modèle de résultat de sondage'
      properties:
        id_sondage:
          description: 'ID du sondage associé au résultat'
          type: integer
        id_user:
          description: "ID de l'utilisateur ayant participé au sondage"
          type: integer
        choix:
          description: "Choix de l'utilisateur dans le sondage"
          type: string
        avis:
          description: "Avis de l'utilisateur sur le sondage"
          type: string
        created_at:
          description: 'Date et heure de création'
          type: string
          format: date-time
          readOnly: 'true'
          nullable: true
        updated_at:
          description: 'Date et heure de mise à jour'
          type: string
          format: date-time
          readOnly: 'true'
          nullable: true
      type: object
    'Resultat Election':
      title: Resultat
      description: "Modèle de résultat d'élection"
      properties:
        id_election:
          description: "ID de l'élection associée au résultat"
          type: integer
        id_candidat:
          description: 'ID du candidat lié au résultat'
          type: integer
        nb_votes:
          description: 'Nombre de votes obtenus par le candidat'
          type: integer
        rang:
          description: 'Rang du candidat dans les résultats'
          type: integer
        created_at:
          description: 'Date et heure de création'
          type: string
          format: date-time
          readOnly: 'true'
          nullable: true
        updated_at:
          description: 'Date et heure de mise à jour'
          type: string
          format: date-time
          readOnly: 'true'
          nullable: true
      type: object
    Role:
      title: Role
      description: "Modèle de rôle d'utilisateur"
      properties:
        name:
          description: 'Nom du rôle'
          type: string
        description:
          description: 'Description du rôle'
          type: string
      type: object
    Sondage:
      title: Sondage
      description: 'Model for representing a survey.'
      properties:
        id:
          description: 'Sondage ID'
          type: integer
          format: int64
        id_user:
          description: 'User ID who created the survey'
          type: integer
        titre:
          description: 'Title of the survey'
          type: string
        description:
          description: 'Description of the survey'
          type: string
        date_debut:
          description: 'Start date of the survey'
          type: string
          format: date
        date_fin:
          description: 'End date of the survey'
          type: string
          format: date
        url_media:
          description: 'URL of the media associated with the survey'
          type: string
        type:
          description: 'Type of the survey'
          type: string
        status:
          description: 'Status of the survey'
          type: string
        commune:
          description: 'Commune associated with the survey'
          type: string
        created_at:
          description: 'Creation date'
          type: string
          format: date-time
        updated_at:
          description: 'Last update date'
          type: string
          format: date-time
      type: object
    TypeSondage:
      title: TypeSondage
      description: 'Model for representing a survey type.'
      properties:
        id:
          description: 'Survey type ID'
          type: integer
          format: int64
        nom:
          description: 'Name of the survey type'
          type: string
        description:
          description: 'Description of the survey type'
          type: string
        created_at:
          description: 'Creation date'
          type: string
          format: date-time
        updated_at:
          description: 'Last update date'
          type: string
          format: date-time
      type: object
    User:
      title: User
      description: 'User model'
      properties:
        id:
          description: 'User ID auto incremented'
          type: integer
        nom:
          description: 'User last name'
          type: string
        prenom:
          description: 'User first name'
          type: string
        elector_card:
          description: 'User elector card'
          type: string
        adresse:
          description: 'User address'
          type: string
        numero_cni:
          description: 'User national ID number pas obligatoire'
          type: string
        commune:
          description: 'User commune'
          type: string
        role_id:
          description: 'User role ID (1=admin, 2=candidat, 3=user/electeur,, default=3)'
          type: integer
        phone:
          description: 'User phone number'
          type: string
        email:
          description: 'User email'
          type: string
          format: email
        password:
          description: 'User password'
          type: string
          format: password
        created_at:
          description: 'User creation date and time'
          type: string
          format: date-time
        updated_at:
          description: 'User last update date and time'
          type: string
          format: date-time
        photo_url:
          description: "photo de l'utilisateur pas obligatoire"
          type: file
      type: object
    Vote:
      title: Vote
      description: 'Model for representing a vote.'
      properties:
        id:
          description: 'Vote ID'
          type: integer
          format: int64
        election_id:
          description: 'Election ID that the vote belongs to'
          type: integer
        voter_id:
          description: 'ID of the user who cast the vote'
          type: integer
        candidat_id:
          description: 'ID of the candidate the vote is cast for'
          type: integer
        created_at:
          description: 'Creation date'
          type: string
          format: date-time
        updated_at:
          description: 'Last update date'
          type: string
          format: date-time
      type: object
